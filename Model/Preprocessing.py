import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
import pickle
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.metrics import accuracy_score
from keras.layers import Embedding, Bidirectional, LSTM, Dense, Dropout

if __name__ == '__main__':

    # Read the pickle file
    data = pd.read_pickle("Model/dataset.pickle")

    #Split the data into training and testing 
    x_train, xTest, y_train, yTest = train_test_split(data['Source Code'],data['Label'],test_size=0.2,random_state=1)
    
    #Split the training data into training and validation
    xTrain, xValidate, yTrain, yValidate = train_test_split(x_train,y_train,test_size=0.2,random_state=1)

    #Initialize tokenizer
    tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=5000)
    tokenizer.fit_on_texts(list(data['Source Code']))

    #Convert training tokens into sequences
    train_tokenized = tokenizer.texts_to_sequences(xTrain)
    train_data = tf.keras.preprocessing.sequence.pad_sequences(train_tokenized,maxlen=500,padding='post')

    #Convert testing tokens into sequences
    test_tokenized = tokenizer.texts_to_sequences(xTest)
    test_data = tf.keras.preprocessing.sequence.pad_sequences(test_tokenized,maxlen=500,padding='post')
    
    #Convert validate tokens into seqeunces 
    validate_tokenized = tokenizer.texts_to_sequences(xValidate)
    validate_data = tf.keras.preprocessing.sequence.pad_sequences(validate_tokenized,maxlen=500,padding='post')


    #model(PLs run😐😐)
    model= tf.keras.Sequential([
        Embedding(input_dim=5000, output_dim=64, input_length=500),
        Bidirectional(LSTM(64,return_sequences=True)),
        Dropout(0.2),
        Bidirectional(LSTM(64)),
        Dense(1,activation='sigmoid')
    ])

    #compile
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.summary()

    model.fit(train_data, yTrain,epochs = 10, validation_data=(validate_data, yValidate))

    y_pred_prods = model.predict(test_data)
    y_pred = [1 if prob > 0.5 else 0 for prob in y_pred_prods]
    accuracy = accuracy_score(yTest, y_pred)
    print(accuracy)